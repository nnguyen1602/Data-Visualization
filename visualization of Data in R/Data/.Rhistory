## Predict event as random guess with 50% probability
probability <- runif(1)
## Predict event as random guess with 50% probability
probability <- runif(1)
## Predict event as random guess with 50% probability
probability <- runif(1)
## Predict event as random guess with 50% probability
probability <- runif(1)
## Predict event as random guess with 50% probability
probability <- runif(1)
## Predict event as random guess with 50% probability
probability <- runif(1)
## Predict event as random guess with 50% probability
probability <- runif(2)
## Predict event as random guess with 50% probability
probability <- runif(3)
## Predict event as random guess with 50% probability
probability <- runif(1)
event <- probability > 0.5
## Predict event as random guess with 50% probability
probability <- runif(1)
event <- probability > 0.5
## Predict event as random guess with 50% probability
probability <- runif(1)
event <- probability > 0.5
## check sum
check_sum <- sum(TRUE & TRUE)
## check sum
check_sum <- sum(TRUE & FALSE)
###############################################################################
### initialize workspace ######################################################
rm(list=ls());
set.seed(2);
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
submissionDir <- paste(baseDir, "Detectors", sep="/")
librariesDir  <- paste(baseDir, "Lib", sep="/")
setwd(librariesDir)
source("f1score.R")
###############################################################################
### read training data  #######################################################
#timeSeriesData <- data.frame(X1=(runif(n = 100)*100), X2=(runif(n = 100)*100), X3=(runif(n = 100)*100), EVENT=(runif(n = 100)+0.03)>=1, Prediction=NA)
setwd(dataDir)
trainingData <- readRDS(file = "waterDataTraining.RDS")
###############################################################################
### execute and evaluate all detectors ########################################
setwd(submissionDir)
allDetectors <- dir(pattern = "*.R")
completeResult <- NULL
for (submission in allDetectors){ # submission <- allDetectors[6]
## Load detector
source(submission)
submissionOutline <- getOutline()
cat(paste("\nRunning Submission: ", submissionOutline$NAME))
## Run detector
predictionResult <- rep(NA, nrow(trainingData)) # empty result array
for (rowIndex in 1:nrow(trainingData)){
predictionResult[rowIndex] <- detect(dataset = trainingData[rowIndex, -11])
}
## Evaluate prediction using F1 score
result <- calculateScore(observations = trainingData$EVENT, predictions = predictionResult)
## Write evaluation result to result table
SubmissionResult <- data.frame(SUBMISSION=submissionOutline$NAME, TP=result$TP, FP=result$FP, TN=result$TN, FN=result$FN, RESULT=result$SCORE, stringsAsFactors = FALSE)
if (is.null(completeResult)){
completeResult <- SubmissionResult
} else {
completeResult <- rbind(completeResult, SubmissionResult)
}
## Clean up workspace
destruct()
}
cat("\nEvaluation finished:\n")
setwd(baseDir)
## Largest value for result wins
winningIndex <- which(max(completeResult$RESULT) == completeResult$RESULT)
cat(paste("\nSubmission: *", completeResult$SUBMISSION[winningIndex], "* wins.\nSee data.frame: completeResult for more Details.", sep="" ))
completeResult
View(result)
View(SubmissionResult)
View(submissionOutline)
View(submissionOutline)
View(result)
View(result)
View(submissionOutline)
View(submissionOutline)
View(completeResult)
View(completeResult)
View(result)
View(result)
###############################################################################
### initialize workspace ######################################################
rm(list=ls());
set.seed(2);
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
submissionDir <- paste(baseDir, "Detectors", sep="/")
librariesDir  <- paste(baseDir, "Lib", sep="/")
setwd(librariesDir)
source("f1score.R")
###############################################################################
### read training data  #######################################################
#timeSeriesData <- data.frame(X1=(runif(n = 100)*100), X2=(runif(n = 100)*100), X3=(runif(n = 100)*100), EVENT=(runif(n = 100)+0.03)>=1, Prediction=NA)
setwd(dataDir)
trainingData <- readRDS(file = "waterDataTraining.RDS")
###############################################################################
### execute and evaluate all detectors ########################################
setwd(submissionDir)
allDetectors <- dir(pattern = "*.R")
completeResult <- NULL
for (submission in allDetectors){ # submission <- allDetectors[6]
## Load detector
source(submission)
submissionOutline <- getOutline()
cat(paste("\nRunning Submission: ", submissionOutline$NAME))
## Run detector
predictionResult <- rep(NA, nrow(trainingData)) # empty result array
for (rowIndex in 1:nrow(trainingData)){
predictionResult[rowIndex] <- detect(dataset = trainingData[rowIndex, -11])
}
## Evaluate prediction using F1 score
result <- calculateScore(observations = trainingData$EVENT, predictions = predictionResult)
## Write evaluation result to result table
SubmissionResult <- data.frame(SUBMISSION=submissionOutline$NAME, TP=result$TP, FP=result$FP, TN=result$TN, FN=result$FN, RESULT=result$SCORE, stringsAsFactors = FALSE)
if (is.null(completeResult)){
completeResult <- SubmissionResult
} else {
completeResult <- rbind(completeResult, SubmissionResult)
}
## Clean up workspace
destruct()
}
cat("\nEvaluation finished:\n")
setwd(baseDir)
## Largest value for result wins
winningIndex <- which(max(completeResult$RESULT) == completeResult$RESULT)
cat(paste("\nSubmission: *", completeResult$SUBMISSION[winningIndex], "* wins.\nSee data.frame: completeResult for more Details.", sep="" ))
completeResult
###############################################################################
### initialize workspace ######################################################
rm(list=ls());
set.seed(2);
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
submissionDir <- paste(baseDir, "Detectors", sep="/")
librariesDir  <- paste(baseDir, "Lib", sep="/")
setwd(librariesDir)
source("f1score.R")
###############################################################################
### read training data  #######################################################
#timeSeriesData <- data.frame(X1=(runif(n = 100)*100), X2=(runif(n = 100)*100), X3=(runif(n = 100)*100), EVENT=(runif(n = 100)+0.03)>=1, Prediction=NA)
setwd(dataDir)
trainingData <- readRDS(file = "waterDataTraining.RDS")
###############################################################################
### execute and evaluate all detectors ########################################
setwd(submissionDir)
allDetectors <- dir(pattern = "*.R")
completeResult <- NULL
for (submission in allDetectors){ # submission <- allDetectors[6]
## Load detector
source(submission)
submissionOutline <- getOutline()
cat(paste("\nRunning Submission: ", submissionOutline$NAME))
## Run detector
predictionResult <- rep(NA, nrow(trainingData)) # empty result array
for (rowIndex in 1:nrow(trainingData)){
predictionResult[rowIndex] <- detect(dataset = trainingData[rowIndex, -11])
}
## Evaluate prediction using F1 score
result <- calculateScore(observations = trainingData$EVENT, predictions = predictionResult)
## Write evaluation result to result table
SubmissionResult <- data.frame(SUBMISSION=submissionOutline$NAME, TP=result$TP, FP=result$FP, TN=result$TN, FN=result$FN, RESULT=result$SCORE, stringsAsFactors = FALSE)
if (is.null(completeResult)){
completeResult <- SubmissionResult
} else {
completeResult <- rbind(completeResult, SubmissionResult)
}
## Clean up workspace
destruct()
}
cat("\nEvaluation finished:\n")
setwd(baseDir)
## Largest value for result wins
winningIndex <- which(max(completeResult$RESULT) == completeResult$RESULT)
cat(paste("\nSubmission: *", completeResult$SUBMISSION[winningIndex], "* wins.\nSee data.frame: completeResult for more Details.", sep="" ))
completeResult
rm(list=ls());
set.seed(2);
baseDir <- getwd()
testData <- read.csv(file = "water_testing.RDS")
testData <- read.csv(file = "water_testing.csv")
saveRDS(testData, file = "testing.rds")
rm(list=ls());
set.seed(2);
baseDir <- getwd()
testData <- read.csv(file = "waterDataTrainingKalman.csv")
saveRDS(testData, file = "testingkalman.rds")
rm(list=ls());
set.seed(2);
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
setwd(dataDir)
trainingData <- readRDS(file = "waterDataTraining.RDS")
summary(trainingData)
#data after remove NA
ndata<- na.omit(trainingData)
# line plot for each of indicators
plot(ndata$Time~ndata$Time,type="l") # interesting
rm(list=ls());
set.seed(2);
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
setwd(dataDir)
trainingData <- readRDS(file = "waterDataTraining.RDS")
summary(trainingData)
#data after remove NA
ndata<- na.omit(trainingData)
library(zoo)
rm(list=ls());
set.seed(2);
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
setwd(dataDir)
trainingData <- readRDS(file = "waterDataTraining.RDS")
summary(trainingData)
library(zoo)
require(data.table)
replaceNaWithLatest <- function(
dfIn,
nameColNa = names(dfIn)[1]
){
dtTest <- data.table(dfIn)
setnames(dtTest, nameColNa, "colNa")
dtTest[, segment := cumsum(!is.na(colNa))]
dtTest[, colNa := colNa[1], by = "segment"]
dtTest[, segment := NULL]
setnames(dtTest, "colNa", nameColNa)
return(dtTest)
}
ndata <- replaceNaWithLatest(trainingData,names(trainingData)[2])
ndata <- replaceNaWithLatest(ndata,names(ndata)[3])
ndata <- replaceNaWithLatest(ndata,names(ndata)[4])
ndata <- replaceNaWithLatest(ndata,names(ndata)[5])
ndata <- replaceNaWithLatest(ndata,names(ndata)[6])
ndata <- replaceNaWithLatest(ndata,names(ndata)[7])
ndata <- replaceNaWithLatest(ndata,names(ndata)[8])
ndata <- replaceNaWithLatest(ndata,names(ndata)[9])
ndata <- replaceNaWithLatest(ndata,names(ndata)[10])
summary(ndata)
# line plot for each of indicators
plot(ndata$Time~ndata$Time,type="l") # interesting
plot(ndata$Tp~ndata$Time,type="l")
plot(ndata$Cl~ndata$Time,type="l")
# line plot for each of indicators
par(mfrow=c(3,2))
plot(ndata$Time~ndata$Time,type="l") # interesting
plot(ndata$Tp~ndata$Time,type="l")
plot(ndata$Cl~ndata$Time,type="l")
plot(ndata$pH~ndata$Time,type="l")
plot(ndata$Redox~ndata$Time,type="l")
plot(ndata$Leit~ndata$Time,type="l")
